I"ET<h1 id="排序问题"><strong>排序问题</strong></h1>

<p><strong>问题描述</strong>：将无序的列表变为有序列表，输入为无序列表，输出为有序列表。</p>

<p><strong>排序NB三人组</strong>：时间复杂度为：O(nlogn)</p>

<h2 id="快速排序quick_sort">快速排序（quick_sort)</h2>

<p><strong>算法思路</strong>：取一个元素p(第一个元素)，使元素p归位；列表被p分成两个部分，左边都比p小，右边都比p大；递归完成排序。</p>

<p><strong>代码关键点</strong>：归位、递归</p>

<pre><code class="language-Python">#将list第一个元素归位，返回归位后所在位置的下标mid
def partition(list, left, right):
    tmp = list[left]
    while left &lt; right:
        #从右边往左边扔,注意加条件left&lt;right
        while left &lt; right and list[right] &gt;= tmp:
            right -= 1
        list[left] = list[right]
        #从左边往右边扔,注意加条件left&lt;right
        while left &lt; right and list[left] &lt;= tmp:
            left += 1
        list[right] = list[left]
    #退出大循环，表明left=right：
    list[left] = tmp
    return left

def _quick_sort(list, left, right):
    if left &lt; right:  #待排序的区域至少有两个值
        mid = random_partition(list, left, right)
        _quick_sort(list, left, mid-1)
        _quick_sort(list, mid+1, right)
</code></pre>
<p>快速排序存在最坏情况，即一个倒序的列表排正序，此时最坏情况来自于递归，解决方法：随机化序列</p>
<pre><code class="language-Python">def random_partition(list, left, right):
    i = random.randint(left, right)
    list[i], list[left] = list[left], list[i]
    return partition(list, left, right)
</code></pre>

<h2 id="堆排序heap_sort">堆排序(heap_sort)</h2>

<h3 id="前传树与二叉树简介">前传：树与二叉树简介</h3>

<p><strong><u>树</u></strong>是一种可以递归定义的数据结构，由n个节点组成的集合：如果n=0，那么这是一颗空树；如果n&gt;0，那么存在1个节点作为树的根节点，其他节点可以分为m个集合，每个集合本身又是一颗树。</p>

<p><strong>二叉树</strong>：度不超过2的树（节点最多有两个叉）</p>

<p><strong>满二叉树</strong>：一个二叉树，如果每一层的节点数都达到最大值，则这个二叉树就是满二叉树。</p>

<p><strong>完全二叉树</strong>：叶节点只能出现在最下层和次下层，并且最下面一层的节点都集中在该层最左边的若干位置的二叉树。</p>

<p><strong>二叉树的存储方式</strong>：链式存储、顺序存储(列表)</p>

<p><strong>父节点和子节点的关系</strong>：父节点为i：左子节点为2i+1，右子节点为2i+2；左(右)子节点为i，则父节点为(i-1)//2；完全二叉树可以用列表存储，通过规律从父亲节点找到儿子节点，反之亦然。</p>

<p><strong><u>堆</u></strong>:一类特殊的数据结构的统称。堆通常是一个可以被看做一棵完全二叉树的数组对象。</p>

<p><strong>大根堆</strong>：一颗完全二叉树，满足任一节点都比其孩子节点大</p>

<p><strong>小根堆</strong>：一颗完全二叉树，满足任一节点都比其孩子节点小</p>

<p><strong>堆的向下调整性质</strong>：假设：节点的左右子树都是堆，但自身不是堆，可以通过一次向下的调整来将其变换为一个堆。</p>

<p>堆排序过程：</p>

<ol>
  <li>建立堆；</li>
  <li>得到堆顶元素，为最大元素；</li>
  <li>去掉堆顶，将堆最后一个元素放到堆顶，此时可通过一次调整重新使堆有序；</li>
  <li>堆顶元素为第二大元素；</li>
  <li>重复步骤3，直到堆变空。</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#大根堆的一次向下调整
</span><span class="k">def</span> <span class="nf">shift</span><span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">):</span>
    <span class="n">tmp</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="n">low</span><span class="p">]</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">low</span>  <span class="c1">#i指向空位
</span>    <span class="n">j</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>  <span class="c1">#初始j指向空位的左孩子
</span>    <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="p">:</span>  <span class="c1">#循环退出的第二种情况：j &gt; high,说明空位i是叶子节点
</span>        <span class="c1">#如果右孩子存在并大于左孩子，将j指向右孩子
</span>        <span class="k">if</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">high</span> <span class="ow">and</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">tmp</span> <span class="o">&lt;</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
            <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
            <span class="n">i</span> <span class="o">=</span> <span class="n">j</span>
            <span class="n">j</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>  <span class="c1">#循环退出的第一种情况：j位置的值比tmp小，说明两个孩子都小于tmp
</span>            <span class="k">break</span>
    <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span>

<span class="k">def</span> <span class="nf">heap_sort</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
    <span class="o">/</span><span class="n">n</span><span class="c1">#构建堆
</span>    <span class="o">/</span><span class="n">n</span><span class="c1">#从最后一个元素n-1的父节点(n-1-1)//2所在的树开始进行向下调整,到根节点0结束
</span>    <span class="k">for</span> <span class="n">low</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">shift</span><span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
    <span class="o">/</span><span class="n">n</span><span class="c1">#挨个出数
</span>    <span class="k">for</span> <span class="n">high</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="c1">#将出的数依次放到列表末端，作为有序区，避免了新空间的消耗
</span>        <span class="nb">list</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nb">list</span><span class="p">[</span><span class="n">high</span><span class="p">]</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="n">high</span><span class="p">],</span> <span class="nb">list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">shift</span><span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">high</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>优先队列</strong>：一些元素的集合，POP操作每次执行都会从优先队列中弹出最大（或最小）的元素。优先队列具有最高级先出 （first in, largest out）的行为特征。通常采用堆数据结构来实现。</p>

<p>Python内置模块——heapq：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">heapq</span>
<span class="n">li</span> <span class="o">=</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="c1">#建堆(小根堆)
</span><span class="n">heapq</span><span class="o">.</span><span class="n">heapify</span><span class="p">(</span><span class="n">li</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">li</span><span class="p">)</span>
<span class="c1">#往堆里再加一个元素
</span><span class="n">heapq</span><span class="o">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">li</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">li</span><span class="p">)</span>
<span class="c1">#弹出堆顶元素
</span><span class="n">item</span> <span class="o">=</span> <span class="n">heapq</span><span class="o">.</span><span class="n">heappop</span><span class="p">(</span><span class="n">li</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">li</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>topK问题</strong>：现有n个数，找出前k大的数（K&lt;n)，采用堆排序的思想</p>

<p>采用排序后切片的方法时间复杂度：O(nlogn+k)；采用LowB三人组(冒泡冒k次)方法的时间复杂度：O(kn);采用对排序思想的时间复杂度：O(nlogk)  {klogk+(n-k)logk}</p>

<p>解决思路：1.取列表前k个元素建立一个小根堆。堆顶就是目前第k大的数。2.依次向后遍历原列表，对于列表中的元素：如果小于堆顶(不是topK)，则忽略该元素；如果大于堆顶，则将堆顶更换为该元素，并且对堆进行一次调整。3.遍历列表中所有元素后，倒序弹出堆顶。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">topk</span><span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
    <span class="c1">#取前k个元素建一个小根堆
</span>    <span class="n">heap</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">k</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">low</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">k</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">shift_small</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="c1">#遍历剩余元素，与堆顶相比
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">)):</span>
        <span class="c1">#如果大于堆顶元素，则将其替换并进行一次调整
</span>        <span class="k">if</span> <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">heap</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
            <span class="n">heap</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">shift_small</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="c1">#挨个出数
</span>    <span class="k">for</span> <span class="n">high</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">heap</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">heap</span><span class="p">[</span><span class="n">high</span><span class="p">]</span> <span class="o">=</span> <span class="n">heap</span><span class="p">[</span><span class="n">high</span><span class="p">],</span> <span class="n">heap</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">shift_small</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">high</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">heap</span>
</code></pre></div></div>

<h2 id="归并排序merge_sort">归并排序(merge_sort)</h2>

<p><strong>算法思路</strong></p>
<ol>
  <li>分解：将列表越分越小，直至分成一个元素。</li>
  <li>终止条件：一个元素是有序的。</li>
  <li>合并：将两个有序列表归并，列表越来越大。</li>
</ol>

<p>一次归并：将两端有序的列表合并成为一个有序的列表</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">li</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">high</span><span class="p">):</span>
    <span class="c1">#列表两段有序: [low, mid] [mid+1, high]
</span>    <span class="n">i</span> <span class="o">=</span> <span class="n">low</span>
    <span class="n">j</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">tmp_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">mid</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">li</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">li</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
            <span class="n">tmp_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">li</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">tmp_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">li</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">mid</span><span class="p">:</span>
        <span class="n">tmp_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">li</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="p">:</span>
        <span class="n">tmp_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">li</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
        <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="c1">#将tmp_list内容拷贝到原list，以完成对原列表的操作
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">li</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp_list</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">low</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="n">li</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">):</span>  <span class="c1">#排序列表li的low~high范围
</span>    <span class="c1">#使用递归，终止条件为列表仅剩一个元素，即low=high
</span>    <span class="k">if</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">:</span>
        <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="n">merge_sort</span><span class="p">(</span><span class="n">li</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">mid</span><span class="p">)</span>
        <span class="n">merge_sort</span><span class="p">(</span><span class="n">li</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">high</span><span class="p">)</span>
        <span class="n">merge</span><span class="p">(</span><span class="n">li</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">high</span><span class="p">)</span>
</code></pre></div></div>

<p>归并排序的时间复杂度：O(nlogn)，空间复杂度：O(n)</p>

<h1 id="总结">总结</h1>

<p>一般而言，就运行时间而言：快速排序&lt;归并排序&lt;堆排序</p>

<p>三中排序算法的优缺点：</p>

<p>快速排序：最坏情况下排序效率低</p>

<p>归并排序：需要额外的内存开销</p>

<p>堆排序：在快的排序算法中相对较慢</p>
:ET